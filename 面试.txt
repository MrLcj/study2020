集合类

Collection（所有集合类的接口）
Collections（操作集合的工具类）
				
列表（list）

线性列表（arraylist、Vector）
  arraylist、Vector是线性表使用Object数字作
  为容器去储存数据，有很多方法维护这个数组，
  长度可以动态增加，提高开放效率。Vector是
  线程同步，arraylist非线程同步。
链表（linkedlist）
  链表随机位置插入、删除数据时比线性表快遍
  历比线性表慢
				
总结：根据实际情况来选择使用ArrayList（非同步
非频繁删除时选择）、Vector（需同步时选择）
LinkedList（频繁在任意位置插入、删除时选择）
			
Map（存储键值对，key唯一）
 HashMap 
  将put进来的key-value封装成一个entity对象
  并储存到一个entity数组当中，位置由key的
  哈希值与数组长度计算而来，如果数组当前下
  标有值，则将数组的下标的值指向新添加的
  entity对象。
TreeMap	
  TreeMap是由Entry对象为节点组成的一颗红黑树，
  put到TreeMap的数据默认按key的自然顺序排序，
  new TreeMap时传入Comparator自定义排序。
Set（保证容器内元素唯一性）
  Set结构其实就是维护一个Map来存储数据的，
  利用Map结构key值唯一性。
					
SpringMVC执行流程
  1：客户端发起请求到DispatcherServlet
(前端控制器)
		
  2：前端控制器请求HandlerMapping
(处理器映射器)查找 Handler根据xml配置、
注解进行查找
			
  3：HandlerMapping(处理器映射器)向
DispatcherServlet(前端控制器)
返回Handler
			
  4：DispatcherServlet(前端控制器)
  调用HandlerAdapter
  (处理器适配器)去执行Handler
			
  5：HandlerAdapter(处理器适配器)
  去执行Handler
		
  6：Handler执行完成给HandlerAdapter
  (处理器适配器)返回ModelAndView
			
  7：HandlerAdapter(处理器适配器)向前
  端控制器返回ModelAndViewModelAndView
  是springmvc框架的一个底层对象，
  包括 Model和view
			
  8：前端控制器请求ResolverView
  (视图解析器)去进行视图解析根据逻辑
  视图名解析成真正的视图(jsp)
			
  9：ResolverView(视图解析器)向
  DispatcherServlet（前端控制器)返回View
		
  10：DispatcherServlet(前端控制器)进行
  视图渲染视图渲染将模型数据
  (在ModelAndView对象中)填充到
   request域最后DispatcherServlet
   (前端控制器)向用户响应(response)结果
			
 Java操作数据库步骤：
	 1、DriverManager类：加载注册驱动（加载）
	 2、connection接口：建立连接  （连接）
	 3、创建Statement/PreparedStatement(创建)
PreparedStatement是statement的子类，具有对
SQL命令进行预编译的功能，对于需要多次执行的
QL语句而言，可以提高执行效率，
一般使用PreparedStatement）
	 4、执行SQL语句 （执行）
	 5、处理结果集	（处理）
	 6、关闭连接，释放资源 （关闭）
		
		
SQL语句：
	1、查询中用到的关键词主要包含六个，
	并且他们的顺序依次为 
select--from--where--group by--having--order by 
其中select和from是必须的，其他关键词是可选的，
这六个关键词的执行顺序 
	
与sql语句的书写顺序并不是一样的，而是按照下面
的顺序来执行 
 from--where--group by--having--select--order by
	
  from:需要从哪个数据表检索数据 
  where:过滤表中数据的条件 
  group by:如何将上面过滤出的数据分组 
  having:对上面已经分组的数据进行过滤的条件  
  select:查看结果集中的哪个列，或列的计算结果 
  order by :按照什么样的顺序来查看返回的数据 
	
2、Sql调优简介和方式
		①：创建必要的索引
		②：使用预编译查询
		③：调整Where字句中的连接顺序
		④：尽量将多条SQL语句压缩到一句SQL中
		⑤：用where字句替换HAVING字句
		⑥：使用表的别名
		⑦：在in和exists中通常情况下使用EXISTS，
因为in不走索引
		⑧：避免在索引上使用计算
		⑩：避免SQL中出现隐式类型转换
			
SQL索引：
  索引的类型；
	1.普通索引：是最基本的索引它没有任何限
	2.唯一索引：索引列的值必须唯一，但允许
有空值。如果是组合索引，则列值的组合必须唯一
	3.主键索引：是一种特殊的唯一索引，一个表
只能有一个主键，不允许有空值。一般是在建表的
时候同时创建主键索引
	4.组合索引：指多个字段上创建的索引，只有
在查询条件中使用了创建索引时的第一个字段，索
引才会被使用。使用组合索引时遵循最左前缀集合
	5.全文索引
	
	1、为什么要创建索引呢？这是因为，创建索引
	   可以大大提高系统的性能。 
	第一，通过创建唯一性索引，可以保证数据库
	   表中每一行数据的唯一性。 
	第二，可以大大加快 数据的检索速度，这也是
	  创建索引的最主要的原因。 
	第三，可以加速表和表之间的连接，特别是在
	  实现数据的参考完整性方面特别有意义。 
	第四，在使用分组和排序 子句进行数据检索时，
	  同样可以显著减少查询中分组和排序的时间。 
	第五，通过使用索引，可以在查询的过程中，
	  使用优化隐藏器，提高系统的性能。
		
	2、增加索引也有许多不利的一个方面。 
	第一，创建索引和维护索引要耗费时间，这种
	  时间随着数据量的增加而增加。 
	第二，索引需要占物理空间，除了数据表占数
	  据空间之外，每一个索引还要占一定的物理
	  空间，如果要建立聚簇索引，那么需要的空
	  间就会更大。 
	第三，当对表中的数据进行增加、删除和修改
	  的时候，索引也要动态的维护，这样就降低
	  了数据的维护速度。 
		
	3、应该在这些列上创建索引
在经常需要搜索的列上――――――――可以加快搜索速度
		
主键的列上――--列的唯一性和组织表中数据的排列
结构
		
经常用在连接的列上――――――这 些列主要是一些外键，
可以加快连接的速度；
		
在经常需要根据范围进行搜索的列上创建索引――――――
因为索引已经排序，其指定的范围是连续的
		
经常需要排序的列上创建索引――――――――这样查询可
以利用索引的排序，加快排序查询的时间
		
在经常使用where子句中的列上面创建索引――――――加快
		条件判断的速度
			
Spring 事物：
	
  为什么要事物？
	我们在实际业务场景中，经常会遇到数据频繁
	修改读取的问题。在同一时刻，不同的业务逻
	辑对同一个表数据进行修改，这种冲突很可能
	造成数据不可挽回的错乱，所以我们需要用事
	务来对数据进行管理。
 事物概念：
	事务必须服从ACID原则。ACID指的是
	原子性（atomicity）、一致性（consistency）
	隔离性（isolation）和持久性（durability）
	通俗理解，事务其实就是一系列指令的集合
	这些指令都需要满足原子性、隔离性、一致性
	和持久性
	比如说一个方法里面有新增、修改、删除三个操作
	原子性就是要么都执行要么都不执行，不会说是
	执行了新增而不执行修改和删除，一致性就是说
	三个操作要么就执行成功，要么都执行失败，
	隔离性指的是当前方法的事务不会影响其他方法的
	事务执行，持久性指的是一但这个方法的事务执行
	成功那么他的结果就会被持久化到数据库。
	
事务的隔离级别：
	
现在来看看MySQL数据库为我们提供的四种隔离级别：

Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。

Repeatable read (可重复读)：可避免脏读、不可重复读的发生。

Read committed (读已提交)：可避免脏读的发生。

Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
	
并发事务导致的问题
	在许多事务处理同一个数据时，如果没有采取
	有效的隔离机制，那么并发处理数据时，会带
	来一些的问题。
	1、第一类丢失更新：撤销一个事务时，把其
	  他事务已提交的更新数据覆盖。
	2、脏读：一个事务读取到另一个事务未提交
	  的更新数据。
	3、幻读也叫虚读：一个事务执行两次查询，
	  第二次结果集包含第一次中没有或某些行
	  已经被删除的数据，造成两次结果不一致，
	  只是另一个事务在这两次查询中间插入
	   或删除了数据造成的。
	4、不可重复读：一个事务两次读取同一行的
	  数据，结果得到不同状态的结果，中间正好
	  另一个事务更新了该数据，两次结果相异，
	  不可被信任。
	5、第二类丢失更新：是不可重复读的特殊情况。
	  如果两个事物都读取同一行，然后两个都进行
	  写操作，并提交，第一个事物所做的改变就会
	  丢失。
	   
如何使hashMap线程安全？
	1、HashMap在并发执行put操作时会引起死循环，
	导致CPU利用率接近100%。因为多线程会导致・
	HashMap的Node链表形成环形数据结构，一旦
	形成环形数据结构，Node的next节点永远不
	为空，就会在获取Node时产生死循环。
	
	2、Hashtable
	   ConcurrentHashMap
       Synchronized Map

简述面向对象（oop）
	把一组数据结构和处理它们的方法组成对象，
	把行为相同的对象归纳为类，在通过封装隐
	藏内部细节通过继承实现特化，
	通过多态实现基于对象类型的动态分派
	
	
jvm执行步骤： 
	加载--->连接---》验证---》准备---》解析---》初始化---》使用---》卸载
	
JAVA中的几种基本数据类型是什么，各自占用多少字节
	byte(8位) short（16位） int（32位） long（64） double（64， 1 11. 。53） float（32， 1  8. 。23）  char  boolean

String类能被继承吗，为什么
	不能，String类被final修饰，当final修饰类时表示这个类不能被继承，实现细节不允许改变，当final修饰方法是不能被子类的方法覆盖
	但是可以被继承，修饰成员变量表示常量，只能被赋值一次，赋值后值不再改变，final不能修饰构造方法，使用final的原因有两个
	第一个是把方法锁定，以防止任何继承修改他的含义

用过哪些Map类，都有什么区别，HashMap是线程安全的吗,并发下使用的Map是什么，他们
内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。
	hashMap：线程非安全  接受key和value为null HashMap的迭代器是fail-fast迭代器
	hashTable：线程安全  既不支持Null key也不支持Null value
	treeMap：非线程安全  允许value为null
	ConcurrentHashMap ：ConcurrentHashMap的实现方式---锁桶（或段）

抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么。
	1.抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；
	2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；
	3。接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；
	4.一个类只能继承一个抽象类，而一个类却可以实现多个接口。
	5.抽象类是对事物的抽象，而接口是对行为的抽象，抽象类是对整个类整体进行抽象，包括属性和行为，但是接口却是对类局部（行为）进行抽象。
	类不能继承多个类，接口可以继承多个接口，类可以实现多个接口
继承和聚合的区别在哪
	继承是指一个类继承另外一个类的功能，并且可以增加他自己新功能的能力，继承是类与类或者接口与类直接最常见的关系。
	聚合是指整体与部分、拥有的关系，整体和部分之间是可分离的，他们具备各自的生命周期。

反射的原理，反射创建类实例的三种方式是什么。
	反射机制的概念：在运行中对于任意一个类，都能够知道这个类的所有方法和属性，对于任意对象都能调用他的任意一个方法，
		这种动态获取信息和动态调用对象的功能叫java语言的反射机制
	
	反射最大的好处就是解耦



java代理总结
	代理的概念：
		代理对象存在的价值主要用于拦截对真实业务对象的访问，
		代理对象应该具有和目标对象相同的方法。
	java中代理：
		使用代理模式必须要让代理类和目标类实现相同的接口，代理类会将所有方法调用，分派到目标对象上反射执行。
		还可以在分派过程中添加“前置通知”和“后置通知”（是在invoke方法中调用目标方法前校验权限，在调用目标后打印日志等）。
	使用代理的五大步骤：
		1.通过实现InvocationHandler接口来自定义自己的InvocationHandler（主要是编写invok方法）
		2.通过proxy.getProxyClass获得动态代理
		3.通过反射机智获取代理类的构造方法，方法签名为getConstructor(InvocationHandler.class)
		4.通过构造函数获得代理对象并将自定义的InvocationHandler实例对象为参数传入
	静态代理：